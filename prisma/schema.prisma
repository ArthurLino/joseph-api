// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String             @unique
  password           String             @map("password")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  cashFlow           CashFlowActivity[]
  cashFlowCategories CashFlowCategory[]
  BankAccounts       BankAccount[]
  CreditCards        CreditCard[]

  @@map("users")
}

model BankAccount {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  ownerID            String             @db.ObjectId
  owner              User               @relation(fields: [ownerID], references: [id])
  name               String             @unique
  balance            Float
  cashFlowActivities CashFlowActivity[]
  creditCard         CreditCard?
  deletable          Boolean            @default(true) @map("_deletable")

  @@map("bank accounts")
}

model CreditCard {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  ownerID          String             @db.ObjectId
  owner            User               @relation(fields: [ownerID], references: [id])
  name             String
  limit            Float
  billClosingDay   Int
  billDueDay       Int
  brand            String
  bankAccountID    String             @unique @db.ObjectId
  bankAccount      BankAccount        @relation(fields: [bankAccountID], references: [id])
  cashFlowActivity CashFlowActivity[]

  @@map("credit cards")
}

model CashFlowActivity {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  authorID      String               @db.ObjectId
  author        User                 @relation(fields: [authorID], references: [id])
  value         Float
  type          CashFlowActivityType
  // if type === EXPENSE
  paymentMethod PaymentMethod?
  // if paymentMethod === CREDIT_CARD
  creditCardID  String?              @db.ObjectId
  creditCard    CreditCard?          @relation(fields: [creditCardID], references: [id])
  // ---------------------------
  bankAccountID String               @db.ObjectId
  bankAccount   BankAccount          @relation(fields: [bankAccountID], references: [id])
  categoryIDs   String[]             @db.ObjectId
  categories    CashFlowCategory[]   @relation(fields: [categoryIDs], references: [id])
  notes         String?
  date          DateTime             @default(now())

  @@map("cashflow activities")
}

model CashFlowCategory {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String             @unique
  authorID    String?            @db.ObjectId
  author      User?              @relation(fields: [authorID], references: [id])
  activityIDs String[]           @db.ObjectId
  activities  CashFlowActivity[] @relation(fields: [activityIDs], references: [id])

  @@map("categories")
}

enum CashFlowActivityType {
  INCOME
  EXPENSE
  INVESTMENT
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  PIX
  TRANSFER
}
